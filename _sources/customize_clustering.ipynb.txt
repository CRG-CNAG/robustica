{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "396152d8",
   "metadata": {},
   "source": [
    "# Using a custom clustering class"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f01f51c2",
   "metadata": {},
   "source": [
    "## Load modules <a name=\"load-modules\"></a>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "2186ae3b",
   "metadata": {},
   "outputs": [],
   "source": [
    "from robustica import RobustICA, corrmats\n",
    "\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "from sklearn.cluster import AgglomerativeClustering\n",
    "from sklearn.utils import parallel_backend\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d2f65136",
   "metadata": {},
   "source": [
    "## Load data from [Sastry (2019)](https://doi.org/10.1038/s41467-019-13483-w) <a class=\"anchor\" id=\"load-data\"></a>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "86b75c3b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['README',\n",
       " 'Metadata',\n",
       " 'Expression Data',\n",
       " 'S matrix',\n",
       " 'A matrix',\n",
       " 'Media Recipes',\n",
       " 'Gene Information']"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "url = \"https://static-content.springer.com/esm/art%3A10.1038%2Fs41467-019-13483-w/MediaObjects/41467_2019_13483_MOESM4_ESM.xlsx\"\n",
    "data = pd.ExcelFile(url)\n",
    "data.sheet_names"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "c8f3f676",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Sheet Name</th>\n",
       "      <th>Description</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Experimental Conditions</td>\n",
       "      <td>Experimental conditions for each sample in PRE...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Expression Data</td>\n",
       "      <td>Expression levels of genes (log2 Transcripts p...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>S matrix</td>\n",
       "      <td>I-modulon gene coefficients. Each column is an...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>A matrix</td>\n",
       "      <td>Condition-specific i-modulon activities. Each ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Media Description</td>\n",
       "      <td>Recipes for base media and trace element mixtures</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Gene Information</td>\n",
       "      <td>Mapping of b-numbers to gene names/annotations...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Metadata Columns</td>\n",
       "      <td>Description</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Sample ID</td>\n",
       "      <td>Unique sample identifier for experiment (e.g. ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Study</td>\n",
       "      <td>Short 1-2 word description of study where samp...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>Project ID</td>\n",
       "      <td>Identifier for study</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>Condition ID</td>\n",
       "      <td>Identifier for unique experimental conditions</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>Replicate #</td>\n",
       "      <td>Suffix for sample ID to distinguish between re...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>Strain Description</td>\n",
       "      <td>Describes gene knock-out, mutation knock-in, o...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>Strain</td>\n",
       "      <td>MG1655 or BW25113</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>Base Media</td>\n",
       "      <td>Media recipe as described in Media Description...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>Carbon Source (g/L)</td>\n",
       "      <td>Carbon source in g/L</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>Nitrogen Source (g/L)</td>\n",
       "      <td>Nitrogen source in g/L</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>Electron Acceptor</td>\n",
       "      <td>Aerobic (O2), anaerobic (None), or nitrate (KN...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>Trace Element Mixture</td>\n",
       "      <td>Trace element recipe as described in Media Des...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>Supplement</td>\n",
       "      <td>Additional media supplements in each experimen...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>Temperature (C)</td>\n",
       "      <td>Temperature of growth condition in Celsius</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>pH</td>\n",
       "      <td>Neutral (7) or acidic (5.5)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>Antibiotic</td>\n",
       "      <td>Treatment with low concentration Kanamycin for...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>Culture Type</td>\n",
       "      <td>Batch or Chemostat (always exponential growth ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>Growth Rate (1/hr)</td>\n",
       "      <td>Measured growth rate of strain in media</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>Evolved Sample</td>\n",
       "      <td>Whether the strain was from an adaptive labora...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>Isolate Type</td>\n",
       "      <td>Clonal or Population (only applicable to ALE s...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>Sequencing Machine</td>\n",
       "      <td>Type of machine used for sequencing</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>Additional Details</td>\n",
       "      <td>Additional information about experiment</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>Biological Replicates</td>\n",
       "      <td>Number of biological replicates within study</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>Alignment</td>\n",
       "      <td>Percent of reads aligned by bowtie to referenc...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>DOI</td>\n",
       "      <td>Accession number for study</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>GEO</td>\n",
       "      <td>GEO Accession ID</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 Sheet Name                                        Description\n",
       "0   Experimental Conditions  Experimental conditions for each sample in PRE...\n",
       "1           Expression Data  Expression levels of genes (log2 Transcripts p...\n",
       "2                  S matrix  I-modulon gene coefficients. Each column is an...\n",
       "3                  A matrix  Condition-specific i-modulon activities. Each ...\n",
       "4         Media Description  Recipes for base media and trace element mixtures\n",
       "5          Gene Information  Mapping of b-numbers to gene names/annotations...\n",
       "6                       NaN                                                NaN\n",
       "7          Metadata Columns                                        Description\n",
       "8                 Sample ID  Unique sample identifier for experiment (e.g. ...\n",
       "9                     Study  Short 1-2 word description of study where samp...\n",
       "10               Project ID                               Identifier for study\n",
       "11             Condition ID      Identifier for unique experimental conditions\n",
       "12              Replicate #  Suffix for sample ID to distinguish between re...\n",
       "13       Strain Description  Describes gene knock-out, mutation knock-in, o...\n",
       "14                   Strain                                  MG1655 or BW25113\n",
       "15               Base Media  Media recipe as described in Media Description...\n",
       "16      Carbon Source (g/L)                               Carbon source in g/L\n",
       "17    Nitrogen Source (g/L)                             Nitrogen source in g/L\n",
       "18        Electron Acceptor  Aerobic (O2), anaerobic (None), or nitrate (KN...\n",
       "19    Trace Element Mixture  Trace element recipe as described in Media Des...\n",
       "20               Supplement  Additional media supplements in each experimen...\n",
       "21          Temperature (C)         Temperature of growth condition in Celsius\n",
       "22                       pH                        Neutral (7) or acidic (5.5)\n",
       "23               Antibiotic  Treatment with low concentration Kanamycin for...\n",
       "24             Culture Type  Batch or Chemostat (always exponential growth ...\n",
       "25       Growth Rate (1/hr)            Measured growth rate of strain in media\n",
       "26           Evolved Sample  Whether the strain was from an adaptive labora...\n",
       "27             Isolate Type  Clonal or Population (only applicable to ALE s...\n",
       "28       Sequencing Machine                Type of machine used for sequencing\n",
       "29       Additional Details            Additional information about experiment\n",
       "30    Biological Replicates       Number of biological replicates within study\n",
       "31                Alignment  Percent of reads aligned by bowtie to referenc...\n",
       "32                      DOI                         Accession number for study\n",
       "33                      GEO                                   GEO Accession ID"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.parse(\"README\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "585e96a1",
   "metadata": {},
   "source": [
    "## Preprocess data <a class=\"anchor\" id=\"preprocess-data\"></a>\n",
    "Following the article's methods, we compute the log2FCs with respect to controls"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "034e4891",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['control__wt_glc__1', 'control__wt_glc__2']\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>control__wt_glc__1</th>\n",
       "      <th>control__wt_glc__2</th>\n",
       "      <th>fur__wt_dpd__1</th>\n",
       "      <th>fur__wt_dpd__2</th>\n",
       "      <th>fur__wt_fe__1</th>\n",
       "      <th>fur__wt_fe__2</th>\n",
       "      <th>fur__delfur_dpd__1</th>\n",
       "      <th>fur__delfur_dpd__2</th>\n",
       "      <th>fur__delfur_fe2__1</th>\n",
       "      <th>fur__delfur_fe2__2</th>\n",
       "      <th>...</th>\n",
       "      <th>efeU__menFentC_ale29__1</th>\n",
       "      <th>efeU__menFentC_ale29__2</th>\n",
       "      <th>efeU__menFentC_ale30__1</th>\n",
       "      <th>efeU__menFentC_ale30__2</th>\n",
       "      <th>efeU__menFentCubiC_ale36__1</th>\n",
       "      <th>efeU__menFentCubiC_ale36__2</th>\n",
       "      <th>efeU__menFentCubiC_ale37__1</th>\n",
       "      <th>efeU__menFentCubiC_ale37__2</th>\n",
       "      <th>efeU__menFentCubiC_ale38__1</th>\n",
       "      <th>efeU__menFentCubiC_ale38__2</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>log-TPM</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>b0002</th>\n",
       "      <td>-0.061772</td>\n",
       "      <td>0.061772</td>\n",
       "      <td>0.636527</td>\n",
       "      <td>0.819793</td>\n",
       "      <td>-0.003615</td>\n",
       "      <td>-0.289353</td>\n",
       "      <td>-1.092023</td>\n",
       "      <td>-0.777289</td>\n",
       "      <td>0.161343</td>\n",
       "      <td>0.145641</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.797097</td>\n",
       "      <td>-0.791859</td>\n",
       "      <td>0.080114</td>\n",
       "      <td>0.102154</td>\n",
       "      <td>0.608180</td>\n",
       "      <td>0.657673</td>\n",
       "      <td>0.813105</td>\n",
       "      <td>0.854813</td>\n",
       "      <td>0.427986</td>\n",
       "      <td>0.484338</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>b0003</th>\n",
       "      <td>-0.053742</td>\n",
       "      <td>0.053742</td>\n",
       "      <td>0.954439</td>\n",
       "      <td>1.334385</td>\n",
       "      <td>0.307588</td>\n",
       "      <td>0.128414</td>\n",
       "      <td>-0.872563</td>\n",
       "      <td>-0.277893</td>\n",
       "      <td>0.428542</td>\n",
       "      <td>0.391761</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.309105</td>\n",
       "      <td>-0.352535</td>\n",
       "      <td>-0.155074</td>\n",
       "      <td>-0.077145</td>\n",
       "      <td>0.447030</td>\n",
       "      <td>0.439881</td>\n",
       "      <td>0.554528</td>\n",
       "      <td>0.569030</td>\n",
       "      <td>0.154905</td>\n",
       "      <td>0.294799</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>b0004</th>\n",
       "      <td>-0.065095</td>\n",
       "      <td>0.065095</td>\n",
       "      <td>-0.202697</td>\n",
       "      <td>0.119195</td>\n",
       "      <td>-0.264995</td>\n",
       "      <td>-0.546017</td>\n",
       "      <td>-1.918349</td>\n",
       "      <td>-1.577736</td>\n",
       "      <td>-0.474815</td>\n",
       "      <td>-0.495312</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.184898</td>\n",
       "      <td>-0.225615</td>\n",
       "      <td>0.019575</td>\n",
       "      <td>0.063986</td>\n",
       "      <td>0.483343</td>\n",
       "      <td>0.452754</td>\n",
       "      <td>0.524828</td>\n",
       "      <td>0.581878</td>\n",
       "      <td>0.293239</td>\n",
       "      <td>0.341040</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>b0005</th>\n",
       "      <td>0.028802</td>\n",
       "      <td>-0.028802</td>\n",
       "      <td>-0.865171</td>\n",
       "      <td>-0.951179</td>\n",
       "      <td>0.428769</td>\n",
       "      <td>0.123564</td>\n",
       "      <td>-1.660351</td>\n",
       "      <td>-1.531147</td>\n",
       "      <td>0.240353</td>\n",
       "      <td>-0.151132</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.308221</td>\n",
       "      <td>-0.581714</td>\n",
       "      <td>0.018820</td>\n",
       "      <td>0.004040</td>\n",
       "      <td>-1.228763</td>\n",
       "      <td>-1.451750</td>\n",
       "      <td>-0.839203</td>\n",
       "      <td>-0.529349</td>\n",
       "      <td>-0.413336</td>\n",
       "      <td>-0.478682</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>b0006</th>\n",
       "      <td>0.009087</td>\n",
       "      <td>-0.009087</td>\n",
       "      <td>-0.131039</td>\n",
       "      <td>-0.124079</td>\n",
       "      <td>-0.144870</td>\n",
       "      <td>-0.090152</td>\n",
       "      <td>-0.219917</td>\n",
       "      <td>-0.046648</td>\n",
       "      <td>-0.044537</td>\n",
       "      <td>-0.089204</td>\n",
       "      <td>...</td>\n",
       "      <td>1.464603</td>\n",
       "      <td>1.415706</td>\n",
       "      <td>1.230831</td>\n",
       "      <td>1.165153</td>\n",
       "      <td>0.447447</td>\n",
       "      <td>0.458852</td>\n",
       "      <td>0.421417</td>\n",
       "      <td>0.408077</td>\n",
       "      <td>1.151066</td>\n",
       "      <td>1.198529</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>b4688</th>\n",
       "      <td>-0.261325</td>\n",
       "      <td>0.261325</td>\n",
       "      <td>-1.425581</td>\n",
       "      <td>-2.734490</td>\n",
       "      <td>0.181893</td>\n",
       "      <td>0.514395</td>\n",
       "      <td>-1.943947</td>\n",
       "      <td>-1.992701</td>\n",
       "      <td>0.066037</td>\n",
       "      <td>-0.695325</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.885297</td>\n",
       "      <td>-0.462485</td>\n",
       "      <td>-2.734490</td>\n",
       "      <td>-1.451148</td>\n",
       "      <td>-1.379069</td>\n",
       "      <td>-1.567420</td>\n",
       "      <td>-0.999610</td>\n",
       "      <td>-1.726577</td>\n",
       "      <td>-2.734490</td>\n",
       "      <td>-1.189069</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>b4693</th>\n",
       "      <td>-0.278909</td>\n",
       "      <td>0.278909</td>\n",
       "      <td>1.361362</td>\n",
       "      <td>1.020310</td>\n",
       "      <td>0.608108</td>\n",
       "      <td>0.988541</td>\n",
       "      <td>2.558416</td>\n",
       "      <td>2.142724</td>\n",
       "      <td>3.120867</td>\n",
       "      <td>3.104887</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.374963</td>\n",
       "      <td>0.856574</td>\n",
       "      <td>-1.147824</td>\n",
       "      <td>-0.814089</td>\n",
       "      <td>2.054471</td>\n",
       "      <td>1.853620</td>\n",
       "      <td>1.957717</td>\n",
       "      <td>1.943582</td>\n",
       "      <td>2.233115</td>\n",
       "      <td>2.023755</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>b4696_1</th>\n",
       "      <td>0.050526</td>\n",
       "      <td>-0.050526</td>\n",
       "      <td>1.166436</td>\n",
       "      <td>1.043373</td>\n",
       "      <td>-0.531441</td>\n",
       "      <td>-0.581626</td>\n",
       "      <td>0.914055</td>\n",
       "      <td>0.731165</td>\n",
       "      <td>-0.127269</td>\n",
       "      <td>-0.164046</td>\n",
       "      <td>...</td>\n",
       "      <td>0.261604</td>\n",
       "      <td>0.278426</td>\n",
       "      <td>0.201089</td>\n",
       "      <td>-0.017780</td>\n",
       "      <td>0.138178</td>\n",
       "      <td>0.122287</td>\n",
       "      <td>0.504402</td>\n",
       "      <td>0.425213</td>\n",
       "      <td>0.629383</td>\n",
       "      <td>0.805945</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>b4696_2</th>\n",
       "      <td>-0.031653</td>\n",
       "      <td>0.031653</td>\n",
       "      <td>0.785573</td>\n",
       "      <td>0.881353</td>\n",
       "      <td>-0.477271</td>\n",
       "      <td>-0.916095</td>\n",
       "      <td>0.837603</td>\n",
       "      <td>0.801393</td>\n",
       "      <td>-0.071710</td>\n",
       "      <td>-0.000540</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.499371</td>\n",
       "      <td>0.398783</td>\n",
       "      <td>0.096609</td>\n",
       "      <td>-0.103446</td>\n",
       "      <td>-0.519098</td>\n",
       "      <td>0.615363</td>\n",
       "      <td>0.343959</td>\n",
       "      <td>0.580288</td>\n",
       "      <td>0.366905</td>\n",
       "      <td>0.702608</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>b4705</th>\n",
       "      <td>0.724324</td>\n",
       "      <td>-0.724324</td>\n",
       "      <td>-4.350151</td>\n",
       "      <td>-4.317498</td>\n",
       "      <td>-0.747489</td>\n",
       "      <td>-1.257045</td>\n",
       "      <td>-3.308337</td>\n",
       "      <td>-4.421970</td>\n",
       "      <td>-2.679693</td>\n",
       "      <td>-1.872713</td>\n",
       "      <td>...</td>\n",
       "      <td>-1.968530</td>\n",
       "      <td>-1.365300</td>\n",
       "      <td>-5.468290</td>\n",
       "      <td>-2.997169</td>\n",
       "      <td>-3.673367</td>\n",
       "      <td>-3.161608</td>\n",
       "      <td>-3.959910</td>\n",
       "      <td>-4.088644</td>\n",
       "      <td>-5.468290</td>\n",
       "      <td>-5.468290</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>3923 rows × 278 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         control__wt_glc__1  control__wt_glc__2  fur__wt_dpd__1  \\\n",
       "log-TPM                                                           \n",
       "b0002             -0.061772            0.061772        0.636527   \n",
       "b0003             -0.053742            0.053742        0.954439   \n",
       "b0004             -0.065095            0.065095       -0.202697   \n",
       "b0005              0.028802           -0.028802       -0.865171   \n",
       "b0006              0.009087           -0.009087       -0.131039   \n",
       "...                     ...                 ...             ...   \n",
       "b4688             -0.261325            0.261325       -1.425581   \n",
       "b4693             -0.278909            0.278909        1.361362   \n",
       "b4696_1            0.050526           -0.050526        1.166436   \n",
       "b4696_2           -0.031653            0.031653        0.785573   \n",
       "b4705              0.724324           -0.724324       -4.350151   \n",
       "\n",
       "         fur__wt_dpd__2  fur__wt_fe__1  fur__wt_fe__2  fur__delfur_dpd__1  \\\n",
       "log-TPM                                                                     \n",
       "b0002          0.819793      -0.003615      -0.289353           -1.092023   \n",
       "b0003          1.334385       0.307588       0.128414           -0.872563   \n",
       "b0004          0.119195      -0.264995      -0.546017           -1.918349   \n",
       "b0005         -0.951179       0.428769       0.123564           -1.660351   \n",
       "b0006         -0.124079      -0.144870      -0.090152           -0.219917   \n",
       "...                 ...            ...            ...                 ...   \n",
       "b4688         -2.734490       0.181893       0.514395           -1.943947   \n",
       "b4693          1.020310       0.608108       0.988541            2.558416   \n",
       "b4696_1        1.043373      -0.531441      -0.581626            0.914055   \n",
       "b4696_2        0.881353      -0.477271      -0.916095            0.837603   \n",
       "b4705         -4.317498      -0.747489      -1.257045           -3.308337   \n",
       "\n",
       "         fur__delfur_dpd__2  fur__delfur_fe2__1  fur__delfur_fe2__2  ...  \\\n",
       "log-TPM                                                              ...   \n",
       "b0002             -0.777289            0.161343            0.145641  ...   \n",
       "b0003             -0.277893            0.428542            0.391761  ...   \n",
       "b0004             -1.577736           -0.474815           -0.495312  ...   \n",
       "b0005             -1.531147            0.240353           -0.151132  ...   \n",
       "b0006             -0.046648           -0.044537           -0.089204  ...   \n",
       "...                     ...                 ...                 ...  ...   \n",
       "b4688             -1.992701            0.066037           -0.695325  ...   \n",
       "b4693              2.142724            3.120867            3.104887  ...   \n",
       "b4696_1            0.731165           -0.127269           -0.164046  ...   \n",
       "b4696_2            0.801393           -0.071710           -0.000540  ...   \n",
       "b4705             -4.421970           -2.679693           -1.872713  ...   \n",
       "\n",
       "         efeU__menFentC_ale29__1  efeU__menFentC_ale29__2  \\\n",
       "log-TPM                                                     \n",
       "b0002                  -0.797097                -0.791859   \n",
       "b0003                  -0.309105                -0.352535   \n",
       "b0004                  -0.184898                -0.225615   \n",
       "b0005                  -0.308221                -0.581714   \n",
       "b0006                   1.464603                 1.415706   \n",
       "...                          ...                      ...   \n",
       "b4688                  -0.885297                -0.462485   \n",
       "b4693                  -0.374963                 0.856574   \n",
       "b4696_1                 0.261604                 0.278426   \n",
       "b4696_2                -0.499371                 0.398783   \n",
       "b4705                  -1.968530                -1.365300   \n",
       "\n",
       "         efeU__menFentC_ale30__1  efeU__menFentC_ale30__2  \\\n",
       "log-TPM                                                     \n",
       "b0002                   0.080114                 0.102154   \n",
       "b0003                  -0.155074                -0.077145   \n",
       "b0004                   0.019575                 0.063986   \n",
       "b0005                   0.018820                 0.004040   \n",
       "b0006                   1.230831                 1.165153   \n",
       "...                          ...                      ...   \n",
       "b4688                  -2.734490                -1.451148   \n",
       "b4693                  -1.147824                -0.814089   \n",
       "b4696_1                 0.201089                -0.017780   \n",
       "b4696_2                 0.096609                -0.103446   \n",
       "b4705                  -5.468290                -2.997169   \n",
       "\n",
       "         efeU__menFentCubiC_ale36__1  efeU__menFentCubiC_ale36__2  \\\n",
       "log-TPM                                                             \n",
       "b0002                       0.608180                     0.657673   \n",
       "b0003                       0.447030                     0.439881   \n",
       "b0004                       0.483343                     0.452754   \n",
       "b0005                      -1.228763                    -1.451750   \n",
       "b0006                       0.447447                     0.458852   \n",
       "...                              ...                          ...   \n",
       "b4688                      -1.379069                    -1.567420   \n",
       "b4693                       2.054471                     1.853620   \n",
       "b4696_1                     0.138178                     0.122287   \n",
       "b4696_2                    -0.519098                     0.615363   \n",
       "b4705                      -3.673367                    -3.161608   \n",
       "\n",
       "         efeU__menFentCubiC_ale37__1  efeU__menFentCubiC_ale37__2  \\\n",
       "log-TPM                                                             \n",
       "b0002                       0.813105                     0.854813   \n",
       "b0003                       0.554528                     0.569030   \n",
       "b0004                       0.524828                     0.581878   \n",
       "b0005                      -0.839203                    -0.529349   \n",
       "b0006                       0.421417                     0.408077   \n",
       "...                              ...                          ...   \n",
       "b4688                      -0.999610                    -1.726577   \n",
       "b4693                       1.957717                     1.943582   \n",
       "b4696_1                     0.504402                     0.425213   \n",
       "b4696_2                     0.343959                     0.580288   \n",
       "b4705                      -3.959910                    -4.088644   \n",
       "\n",
       "         efeU__menFentCubiC_ale38__1  efeU__menFentCubiC_ale38__2  \n",
       "log-TPM                                                            \n",
       "b0002                       0.427986                     0.484338  \n",
       "b0003                       0.154905                     0.294799  \n",
       "b0004                       0.293239                     0.341040  \n",
       "b0005                      -0.413336                    -0.478682  \n",
       "b0006                       1.151066                     1.198529  \n",
       "...                              ...                          ...  \n",
       "b4688                      -2.734490                    -1.189069  \n",
       "b4693                       2.233115                     2.023755  \n",
       "b4696_1                     0.629383                     0.805945  \n",
       "b4696_2                     0.366905                     0.702608  \n",
       "b4705                      -5.468290                    -5.468290  \n",
       "\n",
       "[3923 rows x 278 columns]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# get gene expression\n",
    "X = data.parse(\"Expression Data\").set_index(\"log-TPM\")\n",
    "\n",
    "# get controls\n",
    "controls = [c for c in X.columns if \"control\" in c]\n",
    "print(controls)\n",
    "\n",
    "# compute log2FCs with respect to controls\n",
    "X = X - X[controls].mean(1).values.reshape(-1, 1)\n",
    "\n",
    "X"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6b358af6",
   "metadata": {},
   "source": [
    "## Run `robustica` with custom clustering classes <a name=\"run-robustica\"></a>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f070f36f",
   "metadata": {},
   "source": [
    "### Using the classical *Icasso* algorithm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "051b44f5",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  0%|          | 0/8 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Running FastICA multiple times...\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 8/8 [00:03<00:00,  2.03it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Precomputing distance matrix...\n",
      "Clustering...\n",
      "Computing centroids...\n",
      "(3923, 100) (278, 100)\n",
      "CPU times: user 2.42 s, sys: 242 ms, total: 2.67 s\n",
      "Wall time: 8.59 s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "\n",
    "rica = RobustICA(\n",
    "    n_components=100,\n",
    "    robust_runs=8,\n",
    "    robust_infer_signs=False,\n",
    "    robust_dimreduce=False,\n",
    "    robust_kws={\"affinity\": \"precomputed\", \"linkage\": \"average\"},\n",
    ")\n",
    "\n",
    "with parallel_backend(\"loky\", n_jobs=4):\n",
    "    S_classic, A_classic = rica.fit_transform(X.values)\n",
    "\n",
    "print(S_classic.shape, A_classic.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5c1a92ab",
   "metadata": {},
   "source": [
    "### Using your clustering algorithm"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0a37b05b",
   "metadata": {},
   "source": [
    "#### Create your own clustering class\n",
    "\n",
    "In this example, we create a clustering class that computes the distance within the class."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "9b145da0",
   "metadata": {},
   "outputs": [],
   "source": [
    "class MyClusteringClass:\n",
    "    def __init__(self, **kws):\n",
    "        self.clustering = AgglomerativeClustering(\n",
    "            affinity=\"precomputed\", linkage=\"average\", **kws\n",
    "        )\n",
    "\n",
    "    def fit(self, X):\n",
    "        # compute dissimilarity matrix\n",
    "        D = 1 - np.abs(np.corrcoef(X))\n",
    "\n",
    "        # cluster\n",
    "        self.clustering.fit(D)\n",
    "        self.labels_ = self.clustering.labels_  # required instance"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "105187d6",
   "metadata": {},
   "source": [
    "#### Run"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "52fb1296",
   "metadata": {},
   "source": [
    "You just need to define your class in the `robust_method` and its keyword arguments in `robust_kws`. In this example, "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "06d12397",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  0%|          | 0/8 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Running FastICA multiple times...\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 8/8 [00:03<00:00,  2.47it/s]\n",
      "/home/miquel/miniconda3/lib/python3.8/site-packages/numpy/lib/arraysetops.py:580: FutureWarning: elementwise comparison failed; returning scalar instead, but in the future will perform elementwise comparison\n",
      "  mask |= (ar1 == a)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Clustering...\n",
      "Computing centroids...\n",
      "(3923, 100) (278, 100)\n",
      "CPU times: user 2.52 s, sys: 64.5 ms, total: 2.58 s\n",
      "Wall time: 8.13 s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "\n",
    "rica = RobustICA(\n",
    "    n_components=100,\n",
    "    robust_runs=8,\n",
    "    robust_infer_signs=False,\n",
    "    robust_dimreduce=False,\n",
    "    robust_method=MyClusteringClass,\n",
    "    robust_kws={\"n_clusters\": 100},  # define expected n. clusters\n",
    "    robust_precompdist_func=None,\n",
    ")\n",
    "\n",
    "with parallel_backend(\"loky\", n_jobs=4):\n",
    "    S, A = rica.fit_transform(X.values)\n",
    "\n",
    "print(S.shape, A.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2c5836f2",
   "metadata": {},
   "source": [
    "### Correspondence between the two approaches"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "01e9bf1e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 792x720 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(11, 10))\n",
    "sns.heatmap(\n",
    "    np.abs(corrmats(S.T, S_classic.T)),\n",
    "    cmap=\"coolwarm\",\n",
    "    center=0,\n",
    "    cbar_kws={\"label\": r\"$abs(Pearson Correlation)$\"},\n",
    ")\n",
    "plt.xlabel(\"Classic ICs\")\n",
    "plt.ylabel(\"My ICs\")\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c101de35",
   "metadata": {},
   "source": [
    "### Using other existing clustering algorithms\n",
    "`robustica` accepts any clustering class as `robust_method`. It just needs to create a `self.labels_` attribute. For example, we can use [`HDBSCAN`](https://hdbscan.readthedocs.io/en/latest/how_hdbscan_works.html)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "98bc19d2",
   "metadata": {},
   "outputs": [],
   "source": [
    "from hdbscan import HDBSCAN"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "7530518c",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  0%|          | 0/8 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Running FastICA multiple times...\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 8/8 [00:02<00:00,  2.80it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Inferring sign of components...\n",
      "Reducing dimensions...\n",
      "Clustering...\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/miquel/miniconda3/lib/python3.8/site-packages/numpy/lib/arraysetops.py:580: FutureWarning: elementwise comparison failed; returning scalar instead, but in the future will perform elementwise comparison\n",
      "  mask |= (ar1 == a)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Computing centroids...\n",
      "(3923, 93) (278, 93)\n"
     ]
    }
   ],
   "source": [
    "rica = RobustICA(\n",
    "    n_components=100,\n",
    "    robust_runs=8,\n",
    "    robust_method=HDBSCAN,\n",
    "    robust_kws={\"min_cluster_size\": 4},  # half of robust_runs\n",
    ")\n",
    "\n",
    "with parallel_backend(\"loky\", n_jobs=4):\n",
    "    S, A = rica.fit_transform(X.values)\n",
    "\n",
    "print(S.shape, A.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "5e7c1fad",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>cluster_id</th>\n",
       "      <th>cluster_size</th>\n",
       "      <th>S_mean_std</th>\n",
       "      <th>A_mean_std</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>-1.0</td>\n",
       "      <td>63.0</td>\n",
       "      <td>0.015966</td>\n",
       "      <td>4.107105</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>0.015966</td>\n",
       "      <td>5.892067</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>0.015966</td>\n",
       "      <td>13.805991</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>0.015966</td>\n",
       "      <td>9.572825</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>3.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>0.015966</td>\n",
       "      <td>9.232571</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>88</th>\n",
       "      <td>87.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>0.015966</td>\n",
       "      <td>4.127089</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>89</th>\n",
       "      <td>88.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>0.015966</td>\n",
       "      <td>3.455316</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>90</th>\n",
       "      <td>89.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>0.015966</td>\n",
       "      <td>6.677909</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>91</th>\n",
       "      <td>90.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>0.015966</td>\n",
       "      <td>3.843471</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>92</th>\n",
       "      <td>91.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>0.015966</td>\n",
       "      <td>3.586185</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>93 rows × 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    cluster_id  cluster_size  S_mean_std  A_mean_std\n",
       "0         -1.0          63.0    0.015966    4.107105\n",
       "1          0.0           8.0    0.015966    5.892067\n",
       "2          1.0           8.0    0.015966   13.805991\n",
       "3          2.0           8.0    0.015966    9.572825\n",
       "4          3.0           8.0    0.015966    9.232571\n",
       "..         ...           ...         ...         ...\n",
       "88        87.0           8.0    0.015966    4.127089\n",
       "89        88.0           8.0    0.015966    3.455316\n",
       "90        89.0           4.0    0.015966    6.677909\n",
       "91        90.0           8.0    0.015966    3.843471\n",
       "92        91.0           7.0    0.015966    3.586185\n",
       "\n",
       "[93 rows x 4 columns]"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rica.clustering.stats_"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
